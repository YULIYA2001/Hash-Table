#ifndef HashH
#define HashH

#define compEQ(a,b) (a == b)
typedef int T;   //тип элементов

struct Node
{
	T data;
	Node *next;
};

class Hash
{
	public:
	Node *InsertNode(T);
	void DeleteNode(T);
	Node *FindNode(T);
	int Index(T data);      //индекс в хеш-таблице

	private:
	int hashTableSize;      //размер хеш-таблицы
	Node **hashTable;       //указатель на массив указателей

};

#endif

// хеш-функция размещения вершины
int Hash :: Index(T data)
{
	return (data % hashTableSize);
}

// функция поиска вершины со значением data
Node* Hash :: FindNode(T data)
{
	Node *p;
	p = hashTable[Index(data)];
	while (p && !compEQ(p->data, data))
		p = p->next;
	return p;
}

Node* Hash :: InsertNode(T data)
{
	Node *p, *p0;
	int index = Index(data);
	if ((p = new Node) == 0)
	{
		Application->Title = "ERROR";
		ShowMessage("Нехватка памяти");
		exit(1);
	}
	p0 = hashTable[index];
	hashTable[index] = p;
	p->next = p0;
	p->data = data;
	return p;
}

void Hash :: DeleteNode(T data)
{
	Node *p0, *p;
	int index = Index(data);
	p0 = 0;
	p = hashTable[index];
	while(p && !compEQ(p->data, data))
	{
		p0 = p;
		p = p->next;
	}
	if (!p)
		return;
	if (p0)
		p0->next = p->next;
	else
		hashTable[index] = p->next;
	delete p;
 }




