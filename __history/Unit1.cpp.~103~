#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
#include "Hash.h"
#include "MyTask6.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}

Hash *H;
int maxCount;
int *array;

//кнопка Создать
void __fastcall TForm1::CreateButtonClick(TObject *Sender)
{
	if (MaxCountEdit->Text == "" || HashTableSizeEdit->Text == "")
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Заполните поля \"Размер хеш-таблицы\""
			" и \"Max кол-во злементов\"");
			return;
	}
	ElementsMemo->Clear();
	ShowMemo->Clear();
	PrintTableMemo->Clear();
	int tableSize = StrToInt(HashTableSizeEdit->Text);
	H = new Hash(tableSize);
	maxCount = StrToInt(MaxCountEdit->Text);
	array = new int[maxCount];
	// генерация массива
	randomize();
	for (int i = 0; i < maxCount; i++)
		array[i] = rand();
	// заполнение хеш-таблицы элементами массива
	for (int i = 0; i < maxCount; i++)
	{
		H->InsertNode(array[i]);
		ElementsMemo->Lines->Add(array[i]);
	}
	ShowMemo->Lines->Add("Вы создали новую хеш-таблицу");
	//прокрутка наверх в Memo
	SendMessage(ElementsMemo->Handle, WM_VSCROLL, SB_TOP, 0);
}

// кнопка Добавить
void __fastcall TForm1::AddButtonClick(TObject *Sender)
{
	if(H == NULL)
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Хеш-таблица пуста! Создайте хеш-таблицу.");
		ElementEdit->Text = "";
		return;
	}
	if(ElementEdit->Text == "")
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Введите элемент для добавления!");
		return;
	}
	ShowMemo->Clear();
	PrintTableMemo->Clear();
	int data = StrToInt(ElementEdit->Text);
	ElementEdit->Text = "";
	for(int i = 0; i < maxCount; i++)
	{
		if(array[i] == data)
		{
			Application->Title = "ОШИБКА";
			ShowMessage("Такой элемент уже есть");
			return;
        }
    }
	H->InsertNode(data);
	ShowMemo->Lines->Add("Добавление:");
	ShowMemo->Lines->Add("Элемент " + IntToStr(data) + " добавлен");
	int *temp = new int[++maxCount];
	for (int i = 0; i < maxCount - 1; i++)
	{
		temp[i] = array[i];
    }
	temp[maxCount-1] = data;
	delete[] array;
	array = temp;
	ElementsMemo->Clear();
	for (int i = 0; i < maxCount; i++)
	{
		ElementsMemo->Lines->Add(array[i]);
	}
    //прокрутка наверх в Memo
	SendMessage(ElementsMemo->Handle, WM_VSCROLL, SB_TOP, 0);
}

// кнопка Удалить
void __fastcall TForm1::DeleteButtonClick(TObject *Sender)
{
	if(H == NULL)
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Хеш-таблица пуста!");
		ElementEdit->Text = "";
		return;
	}
	if(ElementEdit->Text == "")
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Введите элемент для удаления!");
		return;
	}
	ShowMemo->Clear();
	PrintTableMemo->Clear();
	int data = StrToInt(ElementEdit->Text);
	Node *p = H->FindNode(data);
	ShowMemo->Lines->Add("Удаление:");
	if (p == NULL)
		ShowMemo->Lines->Add("Элемент " + IntToStr(data) + " не найден");
	else
	{
		ShowMemo->Lines->Add("Элемент " + IntToStr(p->data) + " удален");
		H->DeleteNode(data);
		int i;
		for (i = 0; i < maxCount; i++)
		{
			if(array[i] == data)
			{
			   break;
			}
		}
		for (; i < maxCount - 1; i++)
		{
			array[i] = array[i+1];
		}
		int *temp = new int[--maxCount];
        for (i = 0; i < maxCount; i++)
		{
			temp[i] = array[i];
		}
		delete[] array;
        array = temp;
		ElementsMemo->Clear();
		for (i = 0; i < maxCount; i++)
		{
			ElementsMemo->Lines->Add(array[i]);
		}
        //прокрутка наверх в Memo
		SendMessage(ElementsMemo->Handle, WM_VSCROLL, SB_TOP, 0);
	}
	ElementEdit->Text = "";
}

// кнопка Поиск
void __fastcall TForm1::FindButtonClick(TObject *Sender)
{
	if(H == NULL)
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Хеш-таблица пуста!");
		ElementEdit->Text = "";
		return;
	}
	if(ElementEdit->Text == "")
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Введите элемент для поиска!");
		return;
	}
	ShowMemo->Clear();
	PrintTableMemo->Clear();
	int data = StrToInt(ElementEdit->Text);
	Node *p = H->FindNode(data);
	ShowMemo->Lines->Add("Поиск:");
	if (p == NULL)
		ShowMemo->Lines->Add("Элемент " + IntToStr(data) + " не найден");
	else
		ShowMemo->Lines->Add("Элемент " + IntToStr(p->data) + " найден");
	ElementEdit->Text = "";
}



// кнопка Очистить
void __fastcall TForm1::CleanButtonClick(TObject *Sender)
{
	if(H == NULL)
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Хеш-таблица пуста!");
		ElementEdit->Text = "";
		return;
	}
	// очистка хеш-таблицы
	for (int i = maxCount - 1; i >= 0; i--)
	{
		H->DeleteNode(array[i]);
	}
	delete[] array;
    maxCount = 0;
	ElementsMemo->Clear();
	ShowMemo->Clear();
	PrintTableMemo->Clear();
}

//кнопка Выход
void __fastcall TForm1::ExitButtonClick(TObject *Sender)
{
	// очистка хеш-таблицы
	if(H != NULL)
	{
		for (int i = maxCount - 1; i >= 0; i--)
		{
			H->DeleteNode(array[i]);
		}
	}
	delete[] array;
	Close();
}

// кнопка Печать
void __fastcall TForm1::PrintButtonClick(TObject *Sender)
{
	if(H == NULL || maxCount == 0)
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Хеш-таблица пуста!");
		return;
	}
	ShowMemo->Clear();
	PrintTableMemo->Clear();

	Print(ShowMemo, PrintTableMemo);
    //прокрутка наверх в Memo
	SendMessage(PrintTableMemo->Handle, WM_VSCROLL, SB_TOP, 0);
	SendMessage(ShowMemo->Handle, WM_VSCROLL, SB_TOP, 0);
}

void __fastcall TForm1::Print(TMemo *Memo, TMemo *PrintTableMemo)
{
	for (int i = 0; i < H->hashTableSize; i++)
	{
		//PrintTableMemo->Lines->Add(IntToStr(i + 1) + " : ");
		PrintTableMemo->Text = PrintTableMemo->Text + IntToStr(i + 1) + " : ";
		Node *Temp = H->hashTable[i];
		while (Temp)
		{
			{
				Memo->Lines-> Add(IntToStr(i+1) + ":" + IntToStr(Temp->data));
				PrintTableMemo->Text = PrintTableMemo->Text +
					IntToStr(Temp->data) + " -> ";
			}
			Temp = Temp->next;
		}
		//PrintTableMemo->Lines->Add("");
        PrintTableMemo->Text = PrintTableMemo->Text + "";
	}
}

// кнопка Свой вариант
void __fastcall TForm1::MyTaskButtonClick(TObject *Sender)
{
	if(H == NULL || maxCount == 0)
	{
		Application->Title = "ОШИБКА";
		ShowMessage("Хеш-таблица пуста!");
		return;
	}
	ShowMemo->Clear();
    PrintTableMemo->Clear();
	Application->Title = "УСЛОВИЕ";
	ShowMessage("6. Подсчитать, сколько элементов хеш-таблицы со случайными "
		"ключами превышает среднее значение от всех ключей.");
	MyTask *myTask;
	int amount = myTask->Amount(H->hashTableSize, H->hashTable);
	ShowMemo->Lines->Add("Элементов со случайными ключами превышающими "
		"среднее значение от всех ключей: " + IntToStr(amount));
}

